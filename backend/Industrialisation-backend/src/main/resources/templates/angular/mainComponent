import { Component, OnInit, ViewChild, AfterViewInit, ViewChildren, QueryList } from '@angular/core';
import { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { MatPaginator, MatTableDataSource, MatSort, MatDialog, MatSnackBar } from '@angular/material';
import { ConfirmDialogModel, ConfirmDialogComponent } from 'src/app/sharedcomponent/confirm-dialog/confirm-dialog.component';
import { TranslateService } from '@ngx-translate/core';
import { NotificationService } from '../../../shared/services/notification.service';
import { merge, Observable } from 'rxjs';
import { ConfirmDialogModel, ConfirmDialogComponent } from 'src/app/sharedcomponent/confirm-dialog/confirm-dialog.component';
import { #ComponentNameService } from '../../service/#componentName.service';

#componentsImport

@Component({
	selector: '#componentName#',
	templateUrl: './#componentName.component.html',
	styleUrls: ['./#componentName.component.scss']
})
export class MainContentComponent implements OnInit {

@ViewChildren(MatPaginator) paginator: QueryList<MatPaginator>;
@ViewChild(MatSort) sort: MatSort;
dataSource: MatTableDataSource<any>;


#componentVariables

constructor(private router: Router,
    private route: ActivatedRoute,
    private dialog: MatDialog,
    private notification: NotificationService, 
    private translate: TranslateService,
    private #componentNameService: #ComponentNameService) { }
    
    ngOnInit(){
    	this.liste#componentName();
    }
    columnDefinitions=[#columnDefinitions];
    selectedColumns = this.columnDefinitions;
    getDisplayedColumns(){
    	return this.selectedColumns;
    }
    
 applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }
    
    openDialogDetail(element){
    const dialog1 = this.dialog.open(DetailComponent, {
      disableClose: true,
      data: element,

    }).afterClosed().subscribe(result => {
			
		});
  	}
  	
  	openDialogAdd(){
    const dialog1 = this.dialog.open(EditComponent, {
      disableClose: true,

    }).afterClosed().subscribe(result => {
			
		});
  	}
  	
  	openDialogEdit(element){
      const dialog1 = this.dialog.open(EditComponent, {
      disableClose: true,
      data: element,

    }).afterClosed().subscribe(result => {
			
		});
  }
  
  supprimer(element){
   const message = "Alert.confirm-action";
		const dialogData = new ConfirmDialogModel("Alert.confirmtransmission", message);
		const dialogRef = this.dialogRef.open(ConfirmDialogComponent, {
			disableClose: true,
			maxWidth: "400px",
			data: dialogData
		});
		dialogRef.afterClosed().subscribe(dialogResult => {
			if (dialogResult === true) {
				this.#componentNameService().delete(element).subscribe((data:any)=>{
  					if(data.status){
  						this.translate.get('suppression.notifOk').subscribe((res:any)=>{
  							this.notification.success(res);
  						});
  					}else{
  						this.translate.get('suppression.notifFailed').subscribe((res:any)=>{
  							this.notification.warn(res);
  						});
  					}
  				});
			}
		});
  }
  
  liste#ComponentName (){
  	this.#componentNameService().getAll().subscribe((data:any)=>{
  		if(data.status){
  			this.dataSource = data.data;
  		}
  	});
  }
    
}